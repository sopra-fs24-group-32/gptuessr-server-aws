name: Deploy Project to AWS EC2
on:
  push:
    branches:
      - main
  # run the workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Write API Key to application.properties
        run: |
          echo "dall.e.api.key=${{ secrets.DALL_E_API_KEY }}" >> src/main/resources/application-production.properties
      - name: Build with Gradle
        run: ./gradlew clean bootJar
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: build/libs/*.jar
  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
     
      # - name: Test and analyze
      #   run: ./gradlew test
        # Uncomment if you want to use SonarQube
        # run: ./gradlew test jacocoTestReport sonar
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
     
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: build/libs
     
      - name: List files
        run: ls -la build/libs/
     
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
     
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      
      - name: Ensure deployment directory exists and setup service
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
            # Create application directory with proper permissions
            sudo mkdir -p /opt/springboot/app
            sudo chown ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} /opt/springboot/app
            sudo chmod 755 /opt/springboot/app
            
            # Create systemd service file if it doesn't exist
            if [ ! -f /etc/systemd/system/springboot.service ]; then
              echo 'Creating springboot service file...'
              echo '[Unit]
              Description=Spring Boot Application
              After=network.target
              
              [Service]
              User=${{ secrets.EC2_USERNAME }}
              WorkingDirectory=/opt/springboot/app
              ExecStart=/usr/bin/java -jar /opt/springboot/app/application.jar
              SuccessExitStatus=143
              TimeoutStopSec=10
              Restart=on-failure
              RestartSec=5
              
              [Install]
              WantedBy=multi-user.target' | sudo tee /etc/systemd/system/springboot.service > /dev/null
              
              # Reload systemd to recognize the new service
              sudo systemctl daemon-reload
              sudo systemctl enable springboot.service
            fi
          "
       
      - name: Copy JAR to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/key.pem build/libs/*.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/opt/springboot/app/
     
      - name: Deploy and restart service
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
            cd /opt/springboot/app
            JAR_FILE=\$(ls -t *.jar | head -1)
            echo \"Using JAR file: \$JAR_FILE\"
            
            # Try to stop the service if it exists, but don't fail if it doesn't
            sudo systemctl stop springboot.service || true
            
            # Create symlink to the latest jar
            if [ -L \"application.jar\" ]; then
              sudo rm application.jar
            fi
            sudo ln -s \$JAR_FILE application.jar
            
            # Start the service
            sudo systemctl start springboot.service
            
            # Check if service is running
            sudo systemctl status springboot.service || echo 'Service status check failed, but deployment might still be successful'
          "
     
      - name: Verify deployment
        run: |
          # Give the application a bit more time to start
          sleep 45
          
          # Try the health check a few times before failing
          for i in {1..3}; do
            if curl -s "http://${{ secrets.EC2_HOST }}:8080/actuator/health" | grep "UP"; then
              echo "Application is up and running!"
              exit 0
            fi
            echo "Attempt $i: Application not ready yet, waiting..."
            sleep 15
          done
          
          echo "Application health check failed after multiple attempts"
          exit 1
  
name: Deploy Project to AWS EC2
on:
  push:
    branches:
      - main
  # run the workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      
      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      
      - name: Test and analyze
        run: ./gradlew test jacocoTestReport sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      
      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      
      - name: Write API Key to application.properties
        run: |
          echo "dall.e.api.key=${{ secrets.DALL_E_API_KEY }}" >> src/main/resources/application-production.properties
      
      - name: Build with Gradle
        run: ./gradlew bootJar
      
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-jar
          path: build/libs/*.jar

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: application-jar
          path: build/libs
      
      - name: List files
        run: ls -la build/libs/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/*.jar"
          target: "/opt/springboot/app"
          strip_components: 2
      
      - name: Deploy and restart service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /opt/springboot/app
            JAR_FILE=$(ls -t *.jar | head -1)
            echo "Using JAR file: $JAR_FILE"
            
            # Stop the service
            sudo systemctl stop springboot.service
            
            # Create symlink to the latest jar
            if [ -L "application.jar" ]; then
              sudo rm application.jar
            fi
            sudo ln -s $JAR_FILE application.jar
            
            # Start the service
            sudo systemctl start springboot.service
            
            # Check if service is running
            sudo systemctl status springboot.service
      
      - name: Verify deployment
        run: |
          sleep 30
          curl -s "http://${{ secrets.EC2_HOST }}:8080/actuator/health" | grep "UP" || exit 1

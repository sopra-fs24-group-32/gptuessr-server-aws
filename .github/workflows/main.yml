name: Deploy Project to AWS EC2
on:
  push:
    branches:
      - main
  # run the workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Write API Key to application.properties
        run: |
          echo "dall.e.api.key=${{ secrets.DALL_E_API_KEY }}" >> src/main/resources/application-production.properties

      - name: Build with Gradle
        run: ./gradlew clean bootJar

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: build/libs/*.jar

  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      
      # - name: Test and analyze
      #   run: ./gradlew test
        # Uncomment if you want to use SonarQube
        # run: ./gradlew test jacocoTestReport sonar
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
     
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: build/libs
     
      - name: List files
        run: ls -la build/libs/
     
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
     
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
      - name: Deploy to EC2
        run: |
          scp -i ~/.ssh/key.pem build/libs/*.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/opt/springboot/app/
     
          - name: Deploy and restart service
          run: |
            ssh -i ~/.ssh/key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
              cd /opt/springboot/app
              JAR_FILE=\$(ls -t *.jar | head -1)
              echo \"Using JAR file: \$JAR_FILE\"
              
              # Stop the service
              sudo systemctl stop springboot.service
              
              # Create symlink to the latest jar
              if [ -L \"application.jar\" ]; then
                sudo rm application.jar
              fi
              sudo ln -s \$JAR_FILE application.jar
              
              # Start the service
              sudo systemctl start springboot.service
              
              # Check if service is running
              sudo systemctl status springboot.service
            "
     
      - name: Verify deployment
        run: |
          sleep 30
          curl -s "http://${{ secrets.EC2_HOST }}:8080/actuator/health" | grep "UP" || exit 1